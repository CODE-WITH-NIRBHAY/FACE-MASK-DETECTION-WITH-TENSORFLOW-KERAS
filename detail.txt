

### Step 1: Install Required Libraries

You will need to install some Python libraries to get started. These include `TensorFlow`, `OpenCV`, `NumPy`, and `matplotlib`. Run the following commands in your terminal or command prompt to install them:

pip install tensorflow opencv-python numpy matplotlib

### Step 2: Organize Your Dataset
Make sure your dataset is organized into two folders:
- **with_mask**: Contains images of people wearing masks.
- **without_mask**: Contains images of people not wearing masks.

Your folder structure should look like this:
```
dataset/
    with_mask/
        img1.jpg
        img2.jpg
        ...
    without_mask/
        img3.jpg
        img4.jpg
        ...
```

Each folder (`with_mask` and `without_mask`) should contain images of different people, ideally from multiple angles and different lighting conditions, for better training.

---

### Step 3: Prepare the Model Training Code
Create a Python file (e.g., `train_model.py`) to define the model, train it, and save it.

Here's the code for the `train_model.py` file:


import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

def build_model():
    # Build a Convolutional Neural Network (CNN)
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
        MaxPooling2D(2, 2),
        
        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D(2, 2),
        
        Conv2D(128, (3, 3), activation='relu'),
        MaxPooling2D(2, 2),
        
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        
        Dense(1, activation='sigmoid')  # Binary classification: 1 output neuron with sigmoid activation
    ])
    
    model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])
    return model

def train_model(data_dir="path", model_save_path="model name.h5", epochs=10): #here u have to modify the paths of dataset and model save path
    # Set up image data generators for training and validation
    train_datagen = ImageDataGenerator(
        rescale=1./255,
        rotation_range=40,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest',
        validation_split=0.2
    )

    validation_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

    # Generate data for training and validation
    train_generator = train_datagen.flow_from_directory(
        data_dir,
        target_size=(150, 150),
        batch_size=32,
        class_mode='binary',  # Binary classification (with mask or without mask)
        subset='training'
    )

    validation_generator = validation_datagen.flow_from_directory(
        data_dir,
        target_size=(150, 150),
        batch_size=32,
        class_mode='binary',
        subset='validation'
    )

    # Create and train the model
    model = build_model()
    history = model.fit(
        train_generator,
        validation_data=validation_generator,
        epochs=epochs
    )

    # Save the trained model
    model.save(model_save_path)
    print(f"Model saved at {model_save_path}")

if __name__ == "__main__":
    train_model()  # Start the training process
```

### Key Details:
- **ImageDataGenerator**: This is used for data augmentation and to prepare the data for training. It applies transformations like rotation, shifting, and flipping to create more training examples from the original images.
- **Model Architecture**: A Convolutional Neural Network (CNN) is used to classify images as either "with mask" or "without mask".
- **Binary Classification**: The output layer has 1 neuron with a `sigmoid` activation function, which gives a probability between 0 and 1 (1 means with mask, 0 means without mask).

---

### Step 4: Train the Model
Once the `train_model.py` file is ready, you can run it to start training. Open your terminal or command prompt, navigate to the directory where your `train_model.py` is located, and run the following command:

```bash
python train_model.py
```

This will:
- Train the model on your dataset (images in the `with_mask` and `without_mask` folders).
- Save the trained model to `face_mask_model.h5`.

---

### Step 5: Prepare the Prediction Code
Next, create a new Python file (e.g., `predict_mask.py`) to use the trained model and perform real-time predictions using your webcam.

Here's the code for `predict_mask.py`:

import cv2
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

# Load the trained model
model = load_model('face_mask_model.h5')

def predict_mask():
    # Set up face detection (Haar Cascade Classifier)
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    cap = cv2.VideoCapture(0)  # Open webcam

    if not cap.isOpened():
        print("Error: Could not open webcam.")
        return

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Failed to grab frame")
            break
        
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Convert the frame to grayscale
        faces = face_cascade.detectMultiScale(gray, 1.1, 4)  # Detect faces

        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)  # Draw rectangle around face

            # Extract the face from the frame and resize it
            face_img = frame[y:y+h, x:x+w]
            face_img_resized = cv2.resize(face_img, (150, 150))  # Resize for model input
            face_img_array = image.img_to_array(face_img_resized) / 255.0  # Normalize the image
            face_img_array = np.expand_dims(face_img_array, axis=0)  # Add batch dimension

            # Predict if the face has a mask
            prediction = model.predict(face_img_array)
            if prediction[0] > 0.5:
                label = "With Mask"
                color = (0, 255, 0)  # Green for with mask
            else:
                label = "Without Mask"
                color = (0, 0, 255)  # Red for without mask

            # Display the label and prediction on the frame
            cv2.putText(frame, label, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

        # Show the webcam frame
        cv2.imshow('Mask Detection', frame)

        # Break the loop when 'n' is pressed
        if cv2.waitKey(1) & 0xFF == ord('n'):
            break

    cap.release()  # Release the webcam
    cv2.destroyAllWindows()  # Close all OpenCV windows

if __name__ == "__main__":
    predict_mask()  # Start the mask prediction process
```

### Key Details:
- **Face Detection**: OpenCV's `CascadeClassifier` is used to detect faces in real-time using the webcam.
- **Prediction**: The model predicts whether the person is wearing a mask or not based on the webcam frame.
- **Display Result**: The webcam frame is displayed with a green rectangle if the person is wearing a mask and a red rectangle if they are not.

---

### Step 6: Run the Prediction
Once you have both the model (`face_mask_model.h5`) and the prediction script (`predict_mask.py`), you can run the prediction script to use the webcam for face mask detection.

Run the following command:
python predict_mask.py
*your assignment is commpleted*






#############
ok here is some additional file it is not necessary. basically it is for change the transparent image to RGBA no need but additional

code for it
from PIL import Image
import os

def convert_images_to_rgb(input_dir, output_dir):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    for subdir, _, files in os.walk(input_dir):
        for file in files:
            img_path = os.path.join(subdir, file)
            try:
                img = Image.open(img_path)
                # Convert the image to RGB (if it's not already in RGB)
                img = img.convert("RGB")
                # Save the image to the output directory
                output_path = os.path.join(output_dir, file)
                img.save(output_path)
            except Exception as e:
                print(f"Error processing {img_path}: {e}")

# Convert images in the dataset to RGB and save to a new directory
convert_images_to_rgb('dataset', 'dataset_rgb')

################# again not necessary


details: basically it gen diff dataset with rgba image. if want detail ask me or read documentation

